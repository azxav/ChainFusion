// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for generating auto-replanning suggestions in case of a disruption.
 *
 * The flow takes a description of the disruption and the current production plan as input, and outputs a set of optimized re-routing,
 * component substitutions, or production sequence shifts to reduce replanning time.
 *
 * @interface AutoReplanningInput - The input type for the autoReplanningGenerator function.
 * @interface AutoReplanningOutput - The output type for the autoReplanningGenerator function.
 * @function autoReplanningGenerator - The main function that triggers the auto-replanning flow.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AutoReplanningInputSchema = z.object({
  disruptionDescription: z
    .string()
    .describe('A detailed description of the disruption event.'),
  currentProductionPlan: z
    .string()
    .describe('The current production plan, including routes, components, and sequences.'),
});
export type AutoReplanningInput = z.infer<typeof AutoReplanningInputSchema>;

const AutoReplanningOutputSchema = z.object({
  reroutingSuggestions: z
    .array(z.string())
    .describe('Suggestions for optimized re-routing of shipments or components.'),
  componentSubstitutionSuggestions: z
    .array(z.string())
    .describe('Suggestions for substituting components with alternatives.'),
  productionSequenceShiftSuggestions: z
    .array(z.string())
    .describe('Suggestions for shifting the production sequence to mitigate the disruption.'),
  overallRecommendation: z
    .string()
    .describe('An overall recommendation combining the above suggestions.'),
});
export type AutoReplanningOutput = z.infer<typeof AutoReplanningOutputSchema>;

export async function autoReplanningGenerator(
  input: AutoReplanningInput
): Promise<AutoReplanningOutput> {
  return autoReplanningGeneratorFlow(input);
}

const autoReplanningPrompt = ai.definePrompt({
  name: 'autoReplanningPrompt',
  input: {schema: AutoReplanningInputSchema},
  output: {schema: AutoReplanningOutputSchema},
  prompt: `You are an expert production planner. Given a disruption and the current production plan, you will generate optimized re-routing suggestions, component substitution suggestions, and production sequence shift suggestions to reduce replanning time.

Disruption Description: {{{disruptionDescription}}}
Current Production Plan: {{{currentProductionPlan}}}

Consider all factors and generate a comprehensive set of suggestions. Provide a final overall recommendation.

Output your answer in JSON format:
{
  "reroutingSuggestions": ["suggestion1", "suggestion2", ...],
  "componentSubstitutionSuggestions": ["suggestion1", "suggestion2", ...],
  "productionSequenceShiftSuggestions": ["suggestion1", "suggestion2", ...],
  "overallRecommendation": "overall recommendation"
}
`,
});

const autoReplanningGeneratorFlow = ai.defineFlow(
  {
    name: 'autoReplanningGeneratorFlow',
    inputSchema: AutoReplanningInputSchema,
    outputSchema: AutoReplanningOutputSchema,
  },
  async input => {
    const {output} = await autoReplanningPrompt(input);
    return output!;
  }
);
